B <- 1
control1 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu) #w/ control variates
control1[i] <- mean(T2_1)
}
var(control1)
head(control1)
control1
B <- 1
control1 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu) #w/ control variates
control1[i] <- mean(T2_1)
}
var(control1)
control1
B <- 1000
control1 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu) #w/ control variates
control1[i] <- mean(T2_1)
}
var(control1)
B <- 1000
control1 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu) #w/ control variates
control1[i] <- mean(T2_1)
}
var(control1)
head(control1)
B <- 1000
control1 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_2 <- T1 + c_star * (f2(u) - mu) #w/ control variates
control1[i] <- mean(T2_2)
}
B <- 1000
control2 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_2 <- T1 + c_star * (f2(u) - mu) #w/ control variates
control2[i] <- mean(T2_2)
}
var(control2)
B <- 1000
control2 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_2 <- T1 + c_star * (f2(u) - mu) #w/ control variates
control2[i] <- mean(T2_2)
}
var(control2)
head(control2)
mu1 <- 2-2*exp(-.5)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu) #w/ control variates
theta_hat_cv1 <- mean(T2_1)
theta_hat_cv1
mu1 <- 2-2*exp(-.5)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu1) #w/ control variates
theta_hat_cv1 <- mean(T2_1)
theta_hat_cv1
mu2 <- integrate(f2, 0, 1)$value
T1 <- g(u) #w/o control variates
T2_2 <- T1 + c_star * (f2(u) - mu2) #w/ control variates
theta_hat_cv2 <- mean(T2_2)
theta_hat_cv2
B <- 1000
control2 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_2 <- T1 + c_star * (f2(u) - mu2) #w/ control variates
control2[i] <- mean(T2_2)
}
var(control2)
head(control2)
label<- c("Theoretical", "f1", "f2")
estimate <- c(integrate(g, 0, 1)$value, theta_hat_cv1, theta_hat_cv2)
variances <- c(NA, variancef1, variancef2)
as.data.frame(cbind(label, estimate, variances))
label<- c("Theoretical", "f1", "f2")
estimate <- c(integrate(g, 0, 1)$value, theta_hat_cv1, theta_hat_cv2)
as.data.frame(cbind(label, estimate, variances))
label<- c("f1", "f2")
variances <- c(variancef1, variancef2)
as.data.frame(cbind(label, variances))
B <- 1000
control1 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu1) #w/ control variates
control1[i] <- mean(T2_1)
}
variancef1 <- var(control1)
B <- 1000
control2 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_2 <- T1 + c_star * (f2(u) - mu2) #w/ control variates
control2[i] <- mean(T2_2)
}
variancef2 <- var(control2)
label<- c("Theoretical", "f1", "f2")
estimate <- c(integrate(g, 0, 1)$value, theta_hat_cv1, theta_hat_cv2)
as.data.frame(cbind(label, estimate, variances))
label<- c("f1", "f2")
variances <- c(variancef1, variancef2)
as.data.frame(cbind(label, variances))
label<- c("Theoretical", "f1", "f2")
estimate <- c(integrate(g, 0, 1)$value, theta_hat_cv1, theta_hat_cv2)
as.data.frame(cbind(label, estimate))
label<- c("f1", "f2")
variances <- c(variancef1, variancef2)
as.data.frame(cbind(label, variances))
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
sum(water_choices == 1)
})
tap_water_counts
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
sum(water_choices == 1)
})
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices == 1)
})
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices == 1)
})
sum(tap_water_counts > = 3/27)
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices == 1)
})
sum(tap_water_counts >= 3/27)
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices == 1)
})
mean(tap_water_counts >= 3/27)
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices == 1)
})
mean(3/27 >= tap_water_counts)
x <- rnorm(25, 100, 10000)
y <- rnorm(30, 10, 100)
mean(x)
x <- rnorm(25, 100, 10000)
y <- rnorm(30, 10, 100)
mean(x)
mean(y)
replicate(10000, {
x <- rnorm(25, 100, 10000)
y <- rnorm(30, 10, 100)
mean(x)-mean(y)
})
estimate <- replicate(1000, {
x <- rnorm(25, 100, 10000)
y <- rnorm(30, 10, 100)
mean(x)-mean(y)
})
estimate <- replicate(1000, {
x <- rnorm(25, 100, 10000)
y <- rnorm(30, 10, 100)
mean(x)-mean(y)
})
# how to find the standard error?
se <- sqrt(var(estimate))
estimate <- replicate(1000, {
x <- rnorm(25, 100, 10000)
y <- rnorm(30, 10, 100)
mean(x)-mean(y)
})
# how to find the standard error?
se <- sqrt(var(estimate))
se
estimate <- replicate(1000, {
x <- rnorm(25, 100, 10000)
y <- rnorm(30, 10, 100)
mean(x)-mean(y)
})
# how to find the standard error?
se <- sqrt(var(estimate))
estimate
?rnorm
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, 10000)
y <- rnorm(n = 30, 10, 100)
mean(x)-mean(y)
})
# how to find the standard error?
se <- sqrt(var(estimate))
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, 10000)
y <- rnorm(n = 30, 10, 100)
mean(x)-mean(y)
})
# how to find the standard error?
se <- sqrt(var(estimate))
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, 10000)
y <- rnorm(n = 30, 10, 100)
mean(x)-mean(y)
})
# how to find the standard error?
se <- sqrt(var(estimate))
u_bound <- estimate +se * 1.96
l_bound <- estimate - se * 1.96
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, 10000)
y <- rnorm(n = 30, 10, 100)
mean(x)-mean(y)
})
# how to find the standard error?
se <- sqrt(var(estimate))
u_bound <- estimate +se * 1.96
l_bound <- estimate - se * 1.96
c(l_bound, u_bound)
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, 10000)
y <- rnorm(n = 30, 10, 100)
mean(x)-mean(y)
})
# how to find the standard error?
se <- sqrt(var(estimate))
u_bound <- estimate +se * 1.96
l_bound <- estimate - se * 1.96
c(l_bound, u_bound)
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, 10000)
y <- rnorm(n = 30, 10, 100)
mean(x)-mean(y)
})
estimate <- mean(estimate)
# how to find the standard error?
se <- sqrt(var(estimate))
u_bound <- estimate +se * 1.96
l_bound <- estimate - se * 1.96
c(l_bound, u_bound)
estimate <- mean(estimate)
estimate
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, 10000)
y <- rnorm(n = 30, 10, 100)
mean(x)-mean(y)
})
estimate <- mean(estimate)
estimate
# how to find the standard error?
se <- sqrt(var(estimate))
u_bound <- estimate +se * 1.96
l_bound <- estimate - se * 1.96
c(l_bound, u_bound)
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
mean(x)-mean(y)
})
estimate <- mean(estimate)
# how to find the standard error?
se <- sqrt(var(estimate))
u_bound <- estimate +se * 1.96
l_bound <- estimate - se * 1.96
c(l_bound, u_bound)
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
mean(x)-mean(y)
})
estimate <- mean(estimate)
# how to find the standard error?
se <- sqrt(var(estimate))
se
u_bound <- estimate +se * 1.96
l_bound <- estimate - se * 1.96
c(l_bound, u_bound)
var(estimate)
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
mean(x)-mean(y)
})
x_bar <- mean(estimate)
# how to find the standard error?
se <- sqrt(var(estimate))
se
u_bound <- x_bar +se * 1.96
l_bound <- x_bar - se * 1.96
c(l_bound, u_bound)
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
mean(x)-mean(y)
})
x_bar <- mean(estimate)
# how to find the standard error?
se <- sqrt(var(estimate))
se
u_bound <- x_bar +se * 1.96
l_bound <- x_bar - se * 1.96
c(l_bound, u_bound)
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
mean(x)-mean(y)
})
x_bar <- mean(estimate)
# how to find the standard error?
se <- sqrt(var(estimate))
se
u_bound <- x_bar +se * 1.96
l_bound <- x_bar - se * 1.96
c(l_bound, u_bound)
estimate <- replicate(1000, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
mean(x)-mean(y)
})
x_bar <- mean(estimate)
# how to find the standard error?
se <- sqrt(var(estimate))
u_bound <- x_bar +se * 1.96
l_bound <- x_bar - se * 1.96
c(l_bound, u_bound)
true_mean <- 100-10
mc <- function(m) {
replicate(m, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
statistic <- mean(x)-mean(y)
}
standard_dev <- sd(statistic))
mc <- function(m) {
replicate(m, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
statistic <- mean(x)-mean(y)
}
standard_dev <- sd(statistic))
mc <- function(m) {
replicate(m, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
statistic <- mean(x)-mean(y)
standard_dev <- sd(statistic)
c(estimate= statistic, standard_dev =  standard_dev)
})
}
mc <- function(m) {
replicate(m, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
statistic <- mean(x)-mean(y)
standard_dev <- sd(statistic)
c(estimate= statistic, standard_dev =  standard_dev)
})
}
mc(1000)
mc <- function(m) {
replicate(m, {
x <- rnorm(n = 25, 100, sqrt(10000))
y <- rnorm(n = 30, 10, sqrt(100))
statistic <- mean(x)-mean(y)
standard_dev <- sd(statistic)
c(estimate= statistic, standard_dev =  standard_dev)
})
}
mc(1000)$standard_dev
mc(1000)[standard_dev]
mc(1000)["standard_dev"]
mc <- function(m) {
results <- replicate(m, {
x <- rnorm(n = 25, mean = 100, sd = sqrt(10000))
y <- rnorm(n = 30, mean = 10, sd = sqrt(100))
statistic <- mean(x) - mean(y)
})
# Calculate the standard deviation of the statistics
standard_dev <- sd(results)
# Return the mean difference and its standard deviation
list(estimate = mean(results), standard_dev = standard_dev)
}
mc <- function(m) {
results <- replicate(m, {
x <- rnorm(n = 25, mean = 100, sd = sqrt(10000))
y <- rnorm(n = 30, mean = 10, sd = sqrt(100))
statistic <- mean(x) - mean(y)
})
# Calculate the standard deviation of the statistics
standard_dev <- sd(results)
# Return the mean difference and its standard deviation
list(estimate = mean(results), standard_dev = standard_dev)
}
mc(100)
mc2 <- function(m) {
samples <- rexp(m, 1/3)
theta_hat <- sum(sqrt(samples))/m
standard_dev <- sd(sqrt(samples))
mean <- theta_hat
c(theta_hat = mean, sd =  standard_dev)
}
mc2(10000)["theta_hat"]
true_mean <- 100-10
captured <- 0
for (i in 1:1000) {
mc_results <- mc(1000)
mean_estimate <- mc_results["estimate"]
standard_error <- mc_results["standard_dev"] / sqrt(1000)
z_value <- 1.96
lower_bound <- mean_estimate - standard_error * z_value
upper_bound <- mean_estimate + standard_error * z_value
if (actual_value >= lower_bound && actual_value <= upper_bound) {
captured <- captured + 1
}
}
mc <- function(m) {
results <- replicate(m, {
x <- rnorm(n = 25, mean = 100, sd = sqrt(10000))
y <- rnorm(n = 30, mean = 10, sd = sqrt(100))
statistic <- mean(x) - mean(y)
})
standard_dev <- sd(results)
list(estimate = mean(results), standard_dev = standard_dev)
}
true_mean <- 100-10
captured <- 0
for (i in 1:1000) {
mc_results <- mc(1000)
mean_estimate <- mc_results["estimate"]
standard_error <- mc_results["standard_dev"] / sqrt(1000)
z_value <- 1.96
lower_bound <- mean_estimate - standard_error * z_value
upper_bound <- mean_estimate + standard_error * z_value
if (actual_value >= lower_bound && actual_value <= upper_bound) {
captured <- captured + 1
}
}
mc_results["standard_dev"]
mc_results["estimate"]
true_mean <- 100-10
captured <- 0
for (i in 1:1000) {
mc_results <- mc(1000)
mean_estimate <- mc_results[["estimate"]]
standard_error <- mc_results[["standard_dev"]] / sqrt(1000)
z_value <- 1.96
lower_bound <- mean_estimate - standard_error * z_value
upper_bound <- mean_estimate + standard_error * z_value
if (actual_value >= lower_bound && actual_value <= upper_bound) {
captured <- captured + 1
}
}
true_mean <- 100-10
captured <- 0
for (i in 1:1000) {
mc_results <- mc(1000)
mean_estimate <- mc_results[["estimate"]]
standard_error <- mc_results[["standard_dev"]] / sqrt(1000)
z_value <- 1.96
lower_bound <- mean_estimate - standard_error * z_value
upper_bound <- mean_estimate + standard_error * z_value
if (true_mean >= lower_bound && actual_value <= upper_bound) {
captured <- captured + 1
}
}
true_mean <- 100-10
captured <- 0
for (i in 1:1000) {
mc_results <- mc(1000)
mean_estimate <- mc_results[["estimate"]]
standard_error <- mc_results[["standard_dev"]] / sqrt(1000)
z_value <- 1.96
lower_bound <- mean_estimate - standard_error * z_value
upper_bound <- mean_estimate + standard_error * z_value
if (true_mean >= lower_bound && true_mean <= upper_bound) {
captured <- captured + 1
}
}
captured/1000
mean(captured)
captured
captured/1000
p_hat <- captured/1000
p_hat
sqrt(p_hat*(1-p_hat) / 1000)
