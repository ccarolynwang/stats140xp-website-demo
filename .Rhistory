}
}
empirical_coverage <- coverage_count / 1000
empirical_coverage
sqrt(p_hat*(1-p_hat) / 1000)
sqrt(empirical_coverage*(1-empirical_coverage) / 1000)
x <- runif(1000)
g_x <- 4 * x * exp((-1/2)* x)
mc <- mean(g_x)
mc
control <- numeric(B)
x <- runif(1000)
g_x <- 4 * x * exp((-1/2)* x)
mc <- mean(g_x)
mc
m <- 1000
u <- runif(m/2)
v <- 1-u
g_x_u <- 4 * u * exp((-1/2)* u)
g_x_v <- 4 * v * exp((-1/2)* v)
antithetic_theta_hat <- mean(c(g_x_u, g_x_v))
antithetic_theta_hat
f <- function(u){
exp(-u)
}
g <- function(u){
4 * u * exp((-1/2)* u)
}
u <- runif(1000, 0, 2)
B <- f(u)
A <- g(u)
cor(B, A)
c_star <- -cov(A, B) / var(B)
u <- runif(1000, 0, 1)
mu <- (1-(1/exp(1)))
T1 <- g(u) #w/o control variates
T2 <- T1 + c_star*(f(u) - mu) #w/ control variates
theta_hat_cv <- mean(T2)
theta_hat_cv
n_strata <- 10
little_m <- 1000/n_strata
strata_width <- (1-0)/n_strata
theta_hat_j <- numeric(n_strata)
for (i in 1:n_strata) {
# Define bounds for stratum j
lower_bound <- 0 + (i - 1) * strata_width
upper_bound <- lower_bound + strata_width
# Generate samples within the current stratum
x_sample <- runif(little_m , lower_bound, upper_bound)
# Calculate theta_hat_j for the current stratum
theta_hat_j[i] <- mean(g(x_sample))
}
theta_hat_S <-mean(theta_hat_j)
theta_hat_S
original_g <- function(x) {
x * exp(-.25 * x)
}
theoretical_value <- integrate(original_g , lower = 0, upper = 2)$value
methods <- c("Theoretical","Monte Carlo", "Antithetic Variate", "Control Variate", "Stratified Sampling")
estimate <- c(theoretical_value, mc, antithetic_theta_hat, theta_hat_cv, theta_hat_S)
as.data.frame(cbind(methods, estimate))
B <- 1000
mc <- numeric(B)
for (i in 1:B) {
x <-runif(1000)
g_x <- 4 * x * exp((-1/2)* x)
mc[i] <- mean(g_x)
}
var(mc)
anti <- numeric(B)
for (i in 1:B) {
u <- runif(1000/2)
v <- 1-u
g_x_u <- 4 * u * exp((-1/2)* u)
g_x_v <- 4 * v * exp((-1/2)* v)
anti[i] <- mean(c(g_x_u, g_x_v))
}
var(anti)
control <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2 <- T1 + c_star*(f(u) - mu) #w/ control variates
control[i] <- mean(T2)
}
var(control)
stratified <- numeric(B)
n_strata <- 10
strata_width <- 1 / n_strata
little_m <- 100
for (i in 1:B) {
theta_hat_j <- numeric(n_strata)  # Initialize for each iteration
for (j in 1:n_strata) {
lower_bound <- (j - 1) * strata_width
upper_bound <- lower_bound + strata_width
x_sample <- runif(little_m, lower_bound, upper_bound)
theta_hat_j[j] <- mean(g(x_sample))
}
stratified[i] <- mean(theta_hat_j)
}
var(stratified)
g <- function(x) {
exp(-0.5 * x) / (1 + exp(0.5 * x))
}
u <- runif(1000)
g_x <- g(u)
mean(g_x)
m <- 1000
u <- runif(m/2)
v <- 1-u
g_x_u <- g(u)
g_x_v <- g(v)
antithetic_theta_hat <- sum(g_x_u, g_x_v) / 1000
antithetic_theta_hat
## Do the Us need to be generated separately
u <- runif(1000)
g <- function(x) {exp(-0.5*x) / (1+ exp(0.5*x))}
f1 <- function(x) {
exp(-0.5 * x)
}
B <- f1(u)
A <- g(u)
c_star <- -cov(A, B) / var(B)
mu1 <- 2-2*exp(-.5)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu1) #w/ control variates
theta_hat_cv1 <- mean(T2_1)
theta_hat_cv1
u <- runif(1000)
f2 <- function(x) {
1/(1+exp(0.5*x))
}
B <- f1(u)
A <- g(u)
c_star <- -cov(A, B) / var(B)
mu2 <- integrate(f2, 0, 1)$value
T1 <- g(u) #w/o control variates
T2_2 <- T1 + c_star * (f2(u) - mu2) #w/ control variates
theta_hat_cv2 <- mean(T2_2)
theta_hat_cv2
B <- 1000
control1 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_1 <- T1 + c_star * (f1(u) - mu1) #w/ control variates
control1[i] <- mean(T2_1)
}
variancef1 <- var(control1)
B <- 1000
control2 <- numeric(B)
for (i in 1:B) {
u <- runif(1000)
T1 <- g(u) #w/o control variates
T2_2 <- T1 + c_star * (f2(u) - mu2) #w/ control variates
control2[i] <- mean(T2_2)
}
variancef2 <- var(control2)
label<- c("Theoretical", "f1", "f2")
estimate <- c(integrate(g, 0, 1)$value, theta_hat_cv1, theta_hat_cv2)
as.data.frame(cbind(label, estimate))
label<- c("f1", "f2")
variances <- c(variancef1, variancef2)
as.data.frame(cbind(label, variances))
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices == 1)
})
mean(3/27 >= tap_water_counts)
tap_water_counts <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices)
})
mean(3/27 >= tap_water_counts)
tap_water_counts <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices)
})
mean(3/27 >= tap_water_counts)
tap_water_counts <- replicate(10000, {
water_choices <- sample(1:4, 27, replace = TRUE) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices == 1)
})
mean(3/27 >= tap_water_counts)
tap_water_counts <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
# see how many times bottle 1 (tap) was selected
mean(water_choices)
})
mean(3/27 >= tap_water_counts)
mean(water_choices)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(tap_water_proportion >= 3/27)
water_choices <- rbinom(27, 1, 1/4)
head(water_choices)
mean(water_choices)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(3/27 <= tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(3/27 < tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(3/27 < tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(3/27 <= tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(3/27 < tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(3/27 <= tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
tap_water_proportio
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
tap_water_proportion
# direction
mean(3/27 <= tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
}
# direction
mean(3/27 <= tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
}
mean(water_choices)
}x
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
}x
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
}
# direction
mean(3/27 <= tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
}
mean(3/27 <= tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(3/27 <= tap_water_proportion)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(tap_water_proportion < 3/27)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(tap_water_proportion < 3/27)
tap_water_proportion <- replicate(10000, {
water_choices <- rbinom(27, 1, 1/4) # simulate the null
mean(water_choices)
})
mean(tap_water_proportion < 3/27)
n <- 20
alpha <- .05
mu0 <- 500
n <- 20
alpha <- .05
mu0 <- 500
m <- 10000
p <- numeric(m)
for (j in 1:m) {
x <- rnorm(n, mu0, sigma)
ttest <- t.test(x, alternative = "greater", mu = mu0)
p[j] <- ttest$p.value
}
n <- 20
alpha <- .05
mu0 <- 500
n <- 20
alpha <- .05
mu0 <- 500
sigma <- 100
m <- 10000
p <- numeric(m)
for (j in 1:m) {
x <- rnorm(n, mu0, sigma)
ttest <- t.test(x, alternative = "greater", mu = mu0)
p[j] <- ttest$p.value
}
p.hat <- mean(p < alpha)
se.hat <- sqrt(p.hat * (1 - p.hat) / m)
print(c(p.hat, se.hat))
n <- 20
alpha <- .05
mu0 <- 500
sigma <- 100
m <- 10000
p <- numeric(m)
for (j in 1:m) {
x <- rnorm(n, mu0, sigma)
ttest <- t.test(x, alternative = "greater", mu = mu0)
p[j] <- ttest$p.value
}
p.hat <- mean(p < alpha)
se.hat <- sqrt(p.hat * (1 - p.hat) / m)
print(c(p.hat, se.hat))
n <- 20
alpha <- .05
mu0 <- 500
sigma <- 100
m <- 10000
p <- numeric(m)
for (j in 1:m) {
x <- rnorm(n, mu0, sigma)
ttest <- t.test(x, alternative = "greater", mu = mu0)
p[j] <- ttest$p.value
}
p.hat <- mean(p < alpha)
se.hat <- sqrt(p.hat * (1 - p.hat) / m)
print(c(p.hat, se.hat))
?t.test
n <- 20
alpha <- .05
mu0 <- 500
sigma <- 100
m <- 10000
p <- numeric(m)
for (j in 1:m) {
x <- rnorm(n, mu0, sigma)
ttest <- t.test(x, alternative = "two.sided", mu = mu0)
p[j] <- ttest$p.value
}
p.hat <- mean(p < alpha)
se.hat <- sqrt(p.hat * (1 - p.hat) / m)
print(c(p.hat, se.hat))
mu <- c(seq(450, 650, 10)) #alternatives
M <- length(mu)
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, expr = {
#simulate under alternative mu1
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x,
alternative = "greater", mu = mu0)
ttest$p.value } )
power[i] <- mean(pvalues <= .05)
}
se <- sqrt(power * (1-power) / m)
library(ggplot2)
df <- data.frame(mean=mu, power=power,
upper=power+2*se, lower=power-2*se)
ggplot(df, aes(x=mean, y=power)) +
geom_line() +
geom_vline(xintercept=500, lty=2) +
geom_hline(yintercept=c(0,.05), lty=1:2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2, lwd=1.5)
library(ggplot2)
mu <- c(seq(450, 650, 10)) #alternatives
M <- length(mu)
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, expr = {
#simulate under alternative mu1
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x,
alternative = "two.sided", mu = mu0)
ttest$p.value } )
power[i] <- mean(pvalues <= .05)
}
se <- sqrt(power * (1-power) / m)
mu <- c(seq(450, 650, 10)) #alternatives
M <- length(mu)
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, expr = {
#simulate under alternative mu1
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x,
alternative = "two.sided", mu = mu0)
ttest$p.value } )
power[i] <- mean(pvalues <= .05)
}
library(ggplot2)
df <- data.frame(mean=mu, power=power,
upper=power+2*se, lower=power-2*se)
ggplot(df, aes(x=mean, y=power)) +
geom_line() +
geom_vline(xintercept=500, lty=2) +
geom_hline(yintercept=c(0,.05), lty=1:2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2, lwd=1.5)
mu <- c(seq(450, 650, 10)) #alternatives
M <- length(mu)
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, expr = {
#simulate under alternative mu1
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x,
alternative = "two.sided", mu = mu0)
ttest$p.value } )
power[i] <- mean(pvalues <= .05)
}
se <- sqrt(power * (1 - power) / m)
df <- data.frame(mean=mu, power=power,
upper=power+2*se, lower=power-2*se)
ggplot(df, aes(x=mean, y=power)) +
geom_line() +
geom_vline(xintercept=500, lty=2) +
geom_hline(yintercept=c(0,.05), lty=1:2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2, lwd=1.5)
mu <- c(seq(400, 600, 10)) #alternatives
M <- length(mu)
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, expr = {
#simulate under alternative mu1
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x,
alternative = "two.sided", mu = mu0)
ttest$p.value } )
power[i] <- mean(pvalues <= .05)
}
se <- sqrt(power * (1 - power) / m)
df <- data.frame(mean=mu, power=power,
upper=power+2*se, lower=power-2*se)
ggplot(df, aes(x=mean, y=power)) +
geom_line() +
geom_vline(xintercept=500, lty=2) +
geom_hline(yintercept=c(0,.05), lty=1:2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2, lwd=1.5)
sample_sizes <- c(10, 20, 30, 40, 50)
for (n in sample_sizes) {
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, {
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x, alternative = "two.sided", mu = mu0)
ttest$p.value
})
power[i] <- mean(pvalues <= 0.05)
}
se <- sqrt(power * (1 - power) / m)
results <- rbind(results, data.frame(mean = mu, power = power, se = se, sample_size = n))
}
sample_sizes <- c(10, 20, 30, 40, 50)
for (n in sample_sizes) {
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, {
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x, alternative = "two.sided", mu = mu0)
ttest$p.value
})
power[i] <- mean(pvalues <= 0.05)
}
se <- sqrt(power * (1 - power) / m)
results <- rbind(results, data.frame(mean = mu, power = power, se = se, sample_size = n))
}
results <- data.frame()
sample_sizes <- c(10, 20, 30, 40, 50)
for (n in sample_sizes) {
power <- numeric(M)
for (i in 1:M) {
mu1 <- mu[i]
pvalues <- replicate(m, {
x <- rnorm(n, mean = mu1, sd = sigma)
ttest <- t.test(x, alternative = "two.sided", mu = mu0)
ttest$p.value
})
power[i] <- mean(pvalues <= 0.05)
}
se <- sqrt(power * (1 - power) / m)
results <- rbind(results, data.frame(mean = mu, power = power, se = se, sample_size = n))
}
results
